<%
def is_item_shown?(item)
	if item[:show_if]
		return eval("(#{item[:show_if]}) == true")
	else
		return true
	end
end
def is_item_active?(item)
	if item[:active_if]
		active = eval("(#{item[:active_if]}) == true")
	elsif item[:dropdown]
		active = false
		item[:dropdown].each do |dropdown_item|
			active ||= eval("(#{dropdown_item[:active_if]}) == true")
		end
	else
		active = false
	end
	return active
end
def item_url(item)
	if item[:url]
		return eval("(#{item[:url]}).to_s")
	else
		return "#"
	end
end
def item_label(item)
	return I18n.t(item[:label], default: item[:label])
end
def render_first_level_item(t, item, dropdown = "")
	result = ""
	rendered = false
	if is_item_shown?(item)
		if item[:type] == "delimiter"
			# nothing to render ...
		else
			url = item_url(item)
			label = item_label(item)
			active = is_item_active?(item)
			result += "<li class=\"#{(active ? "active" : "")}\">"
			if !dropdown.blank?
				result += link_to(
					url, 
					class: "dropdown-toggle", 
					data: { toggle: "dropdown" }, 
					aria: { haspopup: "true", expanded: "false" }, 
					role: "button"
				) do
					result = %{
						<div class="iconav-nav-tooltip" data-toggle=\"tooltip\" data-placement=\"right\" data-container=\"body\" title=\"#{label}\">
							#{item[:icon] && RugBuilder::IconBuilder.render(item[:icon])}
						</div>
						<small class=\"iconav-nav-label\">#{label}</small>
					}
					result.html_safe
				end
			else
				result += link_to(url) do
					result = %{
						<div class="iconav-nav-tooltip" data-toggle=\"tooltip\" data-placement=\"right\" data-container=\"body\" title=\"#{label}\">
							#{item[:icon] && RugBuilder::IconBuilder.render(item[:icon])}
						</div>
						<small class=\"iconav-nav-label\">#{label}</small>
					}
					result.html_safe
				end
			end
			result += dropdown
			result += "</li>\n"
			rendered = true
		end
	end
	return [result.html_safe, rendered]
end
def render_second_level_item(t, item)
	result = ""
	rendered = false
	if is_item_shown?(item)
		if item[:type] == "delimiter"
			result += "<li role=\"separator\" class=\"divider\"></li>\n"
		else
			url = item_url(item)
			label = item_label(item)
			active = is_item_active?(item)
			result += "<li class=\"#{(active ? "active" : "")}\">"
			result += link_to(url) do
				result = ""
				result += RugBuilder::IconBuilder.render(item[:icon]) if item[:icon]
				result += label
				result.html_safe
			end
			result += "</li>\n"
			rendered = true
		end
	end
	return [result.html_safe, rendered]
end
%>

<nav class="iconav">
	<a class="iconav-brand" href="<%= eval("(#{RuthAdmin.header_logo_url}).to_s") %>">
		<% if !RuthAdmin.header_logo_image.nil? %>
			<%= image_tag(image_url(RuthAdmin.header_logo_image)) %>
		<% elsif !RuthAdmin.header_logo_icon.nil? %>
			<%= rug_icon(RuthAdmin.header_logo_icon.to_s, class: "iconav-brand-icon") %>
		<% end %>
	</a>
	<div class="iconav-slider">
		<ul class="nav iconav-nav">
			
			<% 
				result = ""
				RuthAdmin.header_menu.each do |item|
					dropdown = ""
					dropdown_count = 0
					if item[:dropdown]
						dropdown += "<ul class=\"dropdown-menu\">\n"
						item[:dropdown].each do |dropdown_item|
							second_level, second_level_rendered = render_second_level_item(self, dropdown_item)
							dropdown += second_level
							dropdown_count += 1 if second_level_rendered
						end
						dropdown += "</ul>\n"
					end
					if dropdown.blank? || dropdown_count > 0
						first_level, first_level_rendered = render_first_level_item(self, item, dropdown) 
						result += first_level
					end
				end 
			%>
			<%= result.html_safe %>

		</ul>
	</div>
</nav>

